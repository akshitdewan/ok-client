problem_name: all_true

problem_description: |
  Write a function that returns <code>True</code> if all the arguments are Truth-y,
  and returns the first False-y value otherwise.<br><br>
  Hint: This can be done in one line.<br>
  <pre><code>
  >> all_true(True, True, True)
  True
  >> all_true(1, 2, 3)
  True
  >> all_true(True, False, True)
  False
  >> all_true(1, True, 0)
  0
  </code></pre>
  
code_lines: |
  def all_true(arg1, arg2, arg3):#0given
  # Blanks like !BLANK can be filled in with any Python code #1given #blankthis
  bool = False #1given
  num = 0 #1given
  if !BLANK:
  return !BLANK #blank
  return !BLANK #blank
  return num and bool

src: |
  def all_true(arg1, arg2, arg3):
    """
    Return True iff all the args are truthy and False otherwise.
    >>> all_true(0, 1, 2)
    0
    >>> all_true(1, 2, 3)
    3
    >>> all_true(True, 2, 3)
    3
    """
    # Enter your code here.
    # Blanks like this can be filled in with any Python code
    bool = False
    num = 0




initial_code: |
  def all_true(arg1, arg2, arg3):
      # Enter your code here.
# solution: |
#   def all_true(arg1, arg2, arg3):
#   	# arg1 and arg2 and arg3 will evaluate to the
#   	# first False-y value if there are any.
#   	# But, if they're all Truth-y, it will evaluate
#   	# to arg3. To make sure the function always
#   	# returns returns True, we can add an
#   	# and True.
#   	# It will work the same with False-y values,
#   	# but will then return the last Truth-y value,
#   	# now always True, if all the arguments are Truth-y.
#   	return arg1 and arg2 and arg3 and True
# test_fn: all_true

test_cases:
  - fn_args: [True, True, True]
    expected: True
  - fn_args: [1, 2, 3]
    expected: True
  - fn_args: [True, False, True]
    expected: False
  - fn_args: [1, True, 0]
    expected: 0
  - fn_args: [0, True, False]
    expected: 0
  - fn_args: [True, 0, False]
    expected: 0

hidden_tests:
  - fn_args: [3, True, 1]
    expected: True
  - fn_args: [True, 2, 0]
    expected: 0
  - fn_args: [True, 2, False]
    expected: False